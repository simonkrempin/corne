
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

/ {
	behaviors {
        	shift_left: shift_left {
            		compatible = "zmk,behavior-mod-morph";
	            	#binding-cells = <0>;
	            	bindings = <&kp LEFT>, <&kp HOME>;
	            	mods = <(MOD_LSFT|MOD_RSFT)>;
        	};

        
	        shift_up: shift_up {
	            	compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp UP>, <&kp PAGE_UP>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
	        };

	        shift_down: shift_down {
			compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp DOWN>, <&kp PAGE_DOWN>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
        	};

        	shift_right: shift_right {
	        	compatible = "zmk,behavior-mod-morph";
			#binding-cells = <0>;
			bindings = <&kp RIGHT>, <&kp END>;
			mods = <(MOD_LSFT|MOD_RSFT)>;
		};
	};

	combos {
		compatible: "zmk, combos";
		combo_space: {
			timeout-ms = <50>;
			key-positions = <19 20>;
			bindings: <&kp SPACE>;
		};
		combo_backspace: {
			timeout-ms = <50>;
			key-positions = <20 21>;
			bindings: <&kp BACKSPACE>;
		};
		combo_enter: {
			timeout-ms = <50>;
			key-positions = <15 16>;
			bindings: <&kp ENTER>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		
		default_layer {
			bindings = <
                		&kp ESC	 &kp F  &kp W  &kp B      &kp V       &kp ENTER		&kp SPACE      &kp K     &kp Y      &kp Z  &kp X  &none
                		&kp TAB	 &kp A  &kp S  &kp T      &kp E       &kp SEMI		&kp BACKSPACE  &kp N     &kp I      &kp R  &kp O  &kp Q
		                &none    &kp U  &kp L  &kp D      &kp C       &none		&none          &kp H     &kp M      &kp G  &kp P  &none
		                			&sk LGUI  &sk LSHIFT  &sl 1		&sl 2  &sk LALT  &sk LCTRL
			>;
		};

		raised_layer {
			bindings = <
                		&kp PERCENT  &kp N1     &kp N2     &kp N3         &kp N4  &kp N5 	&kp N6     &kp N7       &kp N8     &kp N9       &kp N0        &none
                		&kp PIPE     &kp STAR   &kp PLUS   &kp SLASH      &kp GT  &kp DQT   	&kp AMPS   &shift_left  &shift_up  &shift_down  &shift_right  &kp DEL
                		&kp HASH     &kp TILDE  &kp MINUS  &kp KP_DIVIDE  &kp LT  &kp SQT    	&kp CARET  &kp DOT      &kp COMMA  &kp EQUAL    &none         &none
                		                                   &trans         &trans   &trans     	&trans     &trans       &trans
			>;
		};

		lowered_layer {
			bindings = <
		                &kp F1  &kp F2     &kp F3  &kp F4    &kp F5     &kp F6	     &kp F7     &kp F8             &kp F9           &kp F10   &kp F11  &kp F12
		                &none   &none      &none   &kp EXCL  &kp GRAVE  &none        &none      &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LPAR  &kp QMARK    &none
               			&none   &kp UNDER  &none   &none     &none      &none	     &none      &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RPAR  &none    &none
		                                           &trans    &trans     &trans	     &trans     &trans             &trans
			>;
		};

		adjust_layer {
			bindings = <
				&bootloader   &bt BT_CLR  &none  &none  &none  &none		&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none  &none  &bootloader
				&out OUT_USB  &none       &none  &none  &none  &none		&none         &none         &none         &none  &none  &none
				&out OUT_BLE  &none       &none  &none  &none  &none		&none         &none         &none         &none  &none  &none
				                                       &none  &none  &none		&none         &none         &none
			>;
		};
	};

	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <1 2>;
			then-layer = <3>;
		};
	};
};
